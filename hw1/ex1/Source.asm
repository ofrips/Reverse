; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	c:\users\itamar raviv\documents\visual studio 2015\projects\consoleapplication2\consoleapplication2\source.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__fgets:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____acrt_iob_func:PROC
$SG4294967291 DB 'itamarofri', 00H
	ORG $+1
$SG4294967290 DB 'OK', 0aH, 00H
$SG4294967289 DB 'Wrong ID', 0aH, 00H
CONST	ENDS
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_main
PUBLIC	_printf
PUBLIC	__vfprintf_l
PUBLIC	___local_stdio_printf_options
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

	push	ebp
	mov	ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 640  : }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	call	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 957  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\itamar raviv\documents\visual studio 2015\projects\consoleapplication2\consoleapplication2\source.cpp
;	COMDAT _main
_TEXT	SEGMENT
_input$ = -44						; size = 11
_names$ = -32						; size = 11
tv79 = -20						; size = 4
tv143 = -16						; size = 4
tv95 = -12						; size = 4
tv93 = -8						; size = 4
tv138 = -2						; size = 1
tv131 = -1						; size = 1
_main	PROC						; COMDAT

; 5    : int main() {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH

; 6    : 	char input[11];
; 7    : 	input[10] = 0;

	mov	eax, 1
	imul	ecx, eax, 10
	mov	BYTE PTR _input$[ebp+ecx], 0

; 8    : 	char names[] = "itamarofri";

	mov	edx, DWORD PTR $SG4294967291
	mov	DWORD PTR _names$[ebp], edx
	mov	eax, DWORD PTR $SG4294967291+4
	mov	DWORD PTR _names$[ebp+4], eax
	mov	cx, WORD PTR $SG4294967291+8
	mov	WORD PTR _names$[ebp+8], cx
	mov	dl, BYTE PTR $SG4294967291+10
	mov	BYTE PTR _names$[ebp+10], dl

; 9    : 	fgets(input, 11, stdin);

	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	push	eax
	push	11					; 0000000bH
	lea	eax, DWORD PTR _input$[ebp]
	push	eax
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH

; 10   : 	if (!strcmp(input, names)) {

	lea	ecx, DWORD PTR _names$[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	lea	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR tv93[ebp], edx
$LL4@main:
	mov	eax, DWORD PTR tv93[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv131[ebp], cl
	mov	edx, DWORD PTR tv95[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN5@main
	cmp	BYTE PTR tv131[ebp], 0
	je	SHORT $LN6@main
	mov	eax, DWORD PTR tv93[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv138[ebp], cl
	mov	edx, DWORD PTR tv95[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN5@main
	add	DWORD PTR tv93[ebp], 2
	add	DWORD PTR tv95[ebp], 2
	cmp	BYTE PTR tv138[ebp], 0
	jne	SHORT $LL4@main
$LN6@main:
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv143[ebp], eax
$LN7@main:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	cmp	DWORD PTR tv79[ebp], 0
	jne	SHORT $LN2@main

; 11   : 		printf("OK\n");

	push	OFFSET $SG4294967290
	call	_printf
	add	esp, 4

; 12   : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@main
$LN2@main:

; 13   : 	}
; 14   : 	printf("Wrong ID\n");

	push	OFFSET $SG4294967289
	call	_printf
	add	esp, 4

; 15   : 	return 0;

	xor	eax, eax
$LN1@main:

; 16   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

	push	ebp
	mov	ebp, esp

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	pop	ebp
	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
END
